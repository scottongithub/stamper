#!/bin/bash

# email address to be displayed in shell for copy/paste purposes
email=""

# originstamp API key
originstamp_key=""

# Associative array mapping timestamping authority (key) to their API URL (val)
# the keys will be used in filenaming
# a good resource for finding TSA's is https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
declare -A tsa_to_url
tsa_to_url[free_tsa]="https://freetsa.org/tsr"
tsa_to_url[safe_creative]="http://tsa.safecreative.org"
tsa_to_url[digicert]="http://timestamp.digicert.com"
tsa_to_url[apple]="http://timestamp.apple.com/ts01"

for file in *.*; do

  # strip file extension and store as variable 'name'
  name=$(echo "$file" | cut -f 1 -d '.')
  if [[ ! -d $name ]]; then
      mkdir ./$name;

      # make a sha256 of it and store in a text file whose name is also the hash
      sha256=$(sha256sum $file | cut -f 1 -d ' ');
      echo $sha256 > "$name/$sha256"

      # create a RFC 3161 time-stamp query
      openssl ts -query -data $file -no_nonce -sha512 -cert -out "$name/${name}.tsq";

      # iterate on timestamp authorities and for each store the result in a file with the TA name appended
      # with associative arrays, a ! first refers to keys and without ! refers to values
      for timestamping_authority in "${!tsa_to_url[@]}"; do
        printf "\n$name\n${tsa_to_url[$timestamping_authority]}\n"
        curl -H "Content-Type: application/timestamp-query" \
          --data-binary "@${name}/${name}.tsq" "${tsa_to_url[@]}" > \
          "$name/${name}_${timestamping_authority}.tsr";
      done

      #post to originstamp via API
      curl -X POST "http://api.originstamp.com/v3/timestamp/create"\
           -H "Authorization: $originstamp_key"\
           -H "Content-Type: application/json"\
           -d '{"comment": "'"$name"'", "hash": "'"$sha256"'"}' | tee -a "$name/${name}.log";

  else
    echo "Looks like $file has already been done - please rename it if you'd like to stamp/archive it"
  fi

  # add name and its hash to a report that prints to console for easy cut-paste into whatever
  echo $name >> /tmp/stamper_report.txt
  echo $sha256 >> /tmp/stamper_report.txt
  echo >> /tmp/stamper_report.txt
  mv $file "$name/$file";
done

# prints hashes and email address for easier copy-pasting into non RFC 3161 stampers
printf "\n$email\n\n"
cat /tmp/stamper_report.txt
rm /tmp/stamper_report.txt
